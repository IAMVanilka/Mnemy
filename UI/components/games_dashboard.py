# Copyright (C) 2025 IAMVanilka
# SPDX-License-Identifier: GPL-3.0-or-later

import logging
import os.path
import sys

from PySide6.QtCore import QRect, QSize, Qt, QPoint, Signal
from PySide6.QtGui import QPixmap, QAction, QIcon
from PySide6.QtWidgets import QWidget, QVBoxLayout, QPushButton, QScrollArea, QLayout, QLabel, QFrame, QMenu, QDialog, \
    QFormLayout, QLineEdit, QFileDialog, QHBoxLayout, QMessageBox
from pyexpat.errors import messages

from modules.sqls import get_all_games, add_new_game, delete_game, update_game
from modules.ui_controllers.async_runner import AsyncRunner
from modules.API_client import APIClient
from modules.ui_controllers.main_controller import (sync_saves_action, delete_from_server_action, load_games_covers,
                                                    update_game_data_on_server_action, download_saves_action)

from UI.components.dynamic_button_dialog import DynamicButtonDialog

logger=logging.getLogger(__name__)

class ClickableFrame(QFrame):
    """–ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω—é.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–ª–∏–∫ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø–æ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–µ.
    –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏.
    –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ *args, **kwargs –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫."""

    game_deleted_signal = Signal(str)
    game_update_signal = Signal(str)

    def __init__(self, func=None, *args, **kwargs):
        super().__init__()
        self.func = func
        self.args = args
        self.kwargs = kwargs
        self.api_client = APIClient()
        self.setFixedSize(420, 220)

        self.setup_card_ui()

        self.create_context_menu()

    def on_delete_error(self, error):
        if error is not True:
            msg = QMessageBox()
            msg.setWindowTitle("–û—à–∏–±–∫–∞")
            msg.setText("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!" if error is False else
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error}")
            msg.setIcon(QMessageBox.Critical)
            msg.setModal(True)
            msg.exec()

    def on_sync_progress(self):
        self.sync_label.setText("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
        self.sync_label.setStyleSheet("""
                QLabel {
                    color: #141414;
                    font-size: 12px;
                    background-color: rgba(4, 82, 199, 0.55);
                    border-radius: 3px;
                    padding: 2px 5px;
                }
            """)
        self.sync_label.setFixedSize(120, 20)

    def on_sync_error(self, error):
        self.sync_label.setText("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å!")
        self.sync_label.setStyleSheet("""
                QLabel {
                    color: #141414;
                    font-size: 12px;
                    background-color: rgba(199, 4, 40, 0.55);
                    border-radius: 3px;
                    padding: 2px 5px;
                }
            """)
        self.sync_label.setFixedSize(190, 20)

        logger.error(f"Sync error: {error}", exc_info=True)

    def on_sync_result(self, status):
        if status == 404:
            sync_msg = DynamicButtonDialog(
                title="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!",
                message="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!",
            )
            sync_msg.setFixedSize(330, 120)
            sync_msg.show()
            self.on_sync_error("Saves doesn't exist on server!")
        elif status == 200:
            self.game_update_signal.emit
        elif status is None:
            from pathlib import Path
            sync_msg = DynamicButtonDialog(
                title="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!",
                message=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø–æ –ø—É—Ç–∏: {Path(sys.argv[0]).parent.joinpath("logs")}",
            )
            sync_msg.setFixedSize(330, 80)
            sync_msg.show()
            self.on_sync_error("Sync failed need to check logs!")
        else:
            sync_msg = DynamicButtonDialog(
                title="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!",
                message=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {status}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏!",
            )
            sync_msg.setFixedSize(330, 80)
            sync_msg.show()
            self.on_sync_error("Sync failed need to check logs!")

    def setup_card_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä—ã"""
        self.setStyleSheet("""
            QFrame {
                background-color: #333333;
                border: 2px solid #444444;
                border-radius: 10px;
            }
            QFrame:hover {
                border-color: #1B3CBF;
                background-color: #3a3a3a;
            }
        """)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card_layout = QVBoxLayout()
        card_layout.setContentsMargins(10, 10, 10, 10)
        card_layout.setSpacing(8)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_container = QWidget()
        self.image_container.setFixedSize(390, 160)
        self.image_container.setStyleSheet("background-color: transparent; border: none;")
        self.image_container.setLayout(QVBoxLayout())
        self.image_container.layout().setContentsMargins(0, 0, 0, 0)

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä—ã
        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.image_label.setStyleSheet("""
            background-color: transparent;
            border: none;
        """)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path = self.kwargs.get('image_path', '')
        if image_path == "" or image_path is None or not os.path.exists(image_path):
            if os.path.exists(f"UI/resources/{self.kwargs.get("game_name")}.jpg"):
                pixmap = QPixmap(f"UI/resources/{self.kwargs.get("game_name")}.jpg")
            else:
                pixmap = QPixmap()
        else:
            pixmap = QPixmap(image_path)

        if not pixmap.isNull():
            pixmap = pixmap.scaled(390, 160, Qt.IgnoreAspectRatio, Qt.SmoothTransformation)
            self.image_label.setPixmap(pixmap)
        else:
            self.image_label.setText("üñºÔ∏è No picture")
            self.image_label.setStyleSheet("""
                color: #888888;
                font-size: 24px;
                background-color: #2a2a2a;
                border-radius: 5px;
                border: none;
            """)

        self.image_container.layout().addWidget(self.image_label)

        label_text =  "–ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å!" if self.kwargs['last_sync_date'] is None else\
            f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.kwargs['last_sync_date'].strftime("%Y-%m-%d %H:%M:%S")}"
        self.sync_label = QLabel(label_text)
        self.sync_label.setParent(self.image_container)
        self.sync_label.move(10, 10)

        # –ù–∞–¥–ø–∏—Å—å –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É)
        if self.kwargs['last_sync_date'] is None:
            self.sync_label.setStyleSheet("""
                QLabel {
                    color: #141414;
                    font-size: 12px;
                    background-color: rgba(199, 166, 4, 0.55);
                    border-radius: 3px;
                    padding: 2px 5px;
                }
            """)
            label_size = 160
        else:
            self.sync_label.setStyleSheet("""
                QLabel {
                    color: #141414;
                    font-size: 12px;
                    background-color: rgba(4, 199, 46, 0.55);
                    border-radius: 3px;
                    padding: 2px 5px;
                }
            """)
            label_size = 250

        self.sync_label.setFixedSize(label_size, 20)
        self.sync_label.raise_()

        # –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
        icon = QIcon("UI/resources/refresh.svg")
        self.sync_button = QPushButton()
        self.sync_button.setFixedSize(50, 50)
        self.sync_button.setIcon(icon)
        self.sync_button.setIconSize(QSize(50, 50))
        self.sync_button.setStyleSheet("""
            QPushButton {
                background-color: rgba(71, 71, 71, 0.6);
                color: white;
                border-radius: 15px;
                border: none;
                font-size: 60px;
            }
            QPushButton:hover {
                background-color: rgba(100, 100, 100, 0.8);
            }
            QPushButton:pressed {
                background-color: rgba(100, 100, 100, 1);
            }
             QToolTip {
                background-color: #2a2a2a;
                color: white;
                border: 1px solid #555;
                padding: 4px;
            }
        """)
        self.sync_button.setToolTip("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã")
        self.sync_button.setParent(self.image_container)
        self.sync_button.move(335, 105)
        self.sync_button.clicked.connect(self.on_sync)
        self.sync_button.raise_()

        card_layout.addWidget(self.image_container)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (–≤–Ω–∏–∑—É)
        game_name = self.kwargs.get('game_name', 'Unknown Game')
        self.game_label = QLabel(game_name)
        self.game_label.setStyleSheet("""
            color: white;
            font-size: 16px;
            font-weight: bold;
            background-color: transparent;
            border: none;
            text-align: center;
        """)
        self.game_label.setWordWrap(True)
        self.game_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.game_label.setFixedHeight(25)

        card_layout.addWidget(self.game_label)
        self.setLayout(card_layout)
        self.setCursor(Qt.PointingHandCursor)

    def create_context_menu(self):
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.show_context_menu)

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        self.context_menu = QMenu(self)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–µ–Ω—é
        self.context_menu.setStyleSheet("""
            QMenu {
                background-color: #2d2d2d;
                border: 1px solid #555555;
                border-radius: 5px;
                padding: 5px;
            }
            QMenu::item {
                padding: 8px 20px;
                color: white;
                font-size: 14px;
            }
            QMenu::item:selected {
                background-color: #1B3CBF;
                border-radius: 3px;
            }
            QMenu::separator {
                height: 1px;
                background-color: #555555;
                margin: 5px 0px;
            }
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        self.action_open = QAction("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π", self)
        self.action_edit = QAction("–ò–∑–º–µ–Ω–∏—Ç—å", self)
        self.action_delete = QAction("–£–¥–∞–ª–∏—Ç—å", self)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.action_open.triggered.connect(self.on_open)
        self.action_edit.triggered.connect(self.on_edit)
        self.action_delete.triggered.connect(self.on_delete)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é
        self.context_menu.addAction(self.action_open)
        self.context_menu.addAction(self.action_edit)
        self.context_menu.addSeparator()
        self.context_menu.addAction(self.action_delete)

    def show_context_menu(self, position):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu.exec(self.mapToGlobal(position))

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.on_click()
        else:
            super().mousePressEvent(event)

    def on_click(self):
        if self.func is None:
            pass
        else:
            if self.func and callable(self.func):
                if self.args:
                    self.func(*self.args, **self.kwargs)
                else:
                    self.func(**self.kwargs)

    def on_open(self):
        import subprocess
        import platform
        import os

        path = self.kwargs['saves_path']

        system = platform.system()

        if system == "Windows":
            os.startfile(path)
        elif system == "Darwin":  # macOS
            subprocess.Popen(['open', path])
        elif system == "Linux":
            file_managers = [
                'xdg-open',  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
                'dolphin',  # KDE
                'nautilus',  # GNOME
                'thunar',  # XFCE
                'pcmanfm',  # LXDE
                'nemo',  # Cinnamon (Linux Mint)
                'caja'  # MATE
            ]

            opened = False
            for fm in file_managers:
                try:
                    subprocess.Popen([fm, path])
                    opened = True
                    break
                except Exception:
                    error_dialog = DynamicButtonDialog(
                        title='–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏!',
                        message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ!",
                    )
                    error_dialog.setFixedSize(250, 140)
                    error_dialog.show()
                    logger.error("Can't open saves folder!")
                    continue

            if not opened:
                error_dialog = DynamicButtonDialog(
                    title='–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏!',
                    message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º! –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                )
                error_dialog.setFixedSize(250, 140)
                error_dialog.show()
                logger.error("Can't find file manager!")
                raise FileNotFoundError("Folder isn't open: can't find file manager!")

    def on_edit(self):
        print("–í—ã–±—Ä–∞–Ω–æ: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        game_update_status = AddNewGameWindow(
            edit=True,
            game_name=self.kwargs.get('game_name', ''),
            saves_path=self.kwargs.get('saves_path', ''),
            game_path=self.kwargs.get('game_path', ''),
            image_path=self.kwargs.get('image_path', ''),
            game_id=self.kwargs.get('game_id', ''),
        )

        self.game_update_signal.emit(game_update_status.game_update.emit)

    def on_delete(self):
        game_id = self.kwargs.get('game_id')
        game_name = self.kwargs.get('game_name')

        if game_id:
            dialog = DynamicButtonDialog(
                title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                message=f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É \"{game_name}\"?",
                buttons=[("–£–¥–∞–ª–∏—Ç—å", "danger"), ("–û—Ç–º–µ–Ω–∞", "secondary")],
                checkbox_text="–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–æ –≤—Å–µ–º–∏ –±—ç–∫–∞–ø–∞–º–∏",
                default_button=0
            )
            result = dialog.exec()

            if result == QDialog.Accepted:
                delete_from_server = dialog.checkbox_checked
                user_choose = dialog.user_choice
                try:
                    if user_choose == 0:
                        delete_game(game_id=game_id)
                        if os.path.exists(f"UI/resources/{game_name}.jpg"):
                            os.remove(f"UI/resources/{game_name}.jpg")
                        self.game_deleted_signal.emit(game_id)
                        logger.info(f"Game {game_name} deleted.")

                        if delete_from_server:
                            self.delete_runner = AsyncRunner()
                            self.delete_runner.finished.connect(self.on_delete_error)
                            self.delete_runner.error.connect(self.on_delete_error)
                            self.delete_runner.run_async(delete_from_server_action, game_name, True, self.api_client)

                except Exception as e:
                    logger.error(f"Delete game error: {e}", exc_info=True)
                    error_dialog = DynamicButtonDialog(
                        title="–û—à–∏–±–∫–∞",
                        message=f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É: {str(e)}",
                    )
                    error_dialog.setFixedSize(250, 140)
                    error_dialog.show()

    def on_sync(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        import os
        game_id = self.kwargs.get('game_id')

        self.sync_runner = AsyncRunner()
        self.sync_runner.finished.connect(self.game_update_signal.emit)
        self.sync_runner.error.connect(self.on_sync_error)
        self.sync_runner.progress.connect(self.on_sync_progress)
        self.sync_runner.result.connect(self.on_sync_result)

        saves_path = self.kwargs.get("saves_path")
        game_path = self.kwargs.get("game_path")

        if not saves_path or not os.path.exists(saves_path):
            missing = "–ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π"
        elif not game_path or not os.path.exists(game_path):
            missing = "–ø—É—Ç—å –∫ exe-—Ñ–∞–π–ª—É –∏–≥—Ä—ã"
        else:
            missing = None

        if missing:
            warning_window = DynamicButtonDialog(
                title="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
                message=f"–£ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {missing}.\n\n"
                        "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏?",
                buttons=[('–î–∞', 'success'), ('–ù–µ—Ç', 'secondary')],
                default_button=0
            )
            warning_window.setFixedSize(400, 240)
            result = warning_window.exec()
            if result == QDialog.Accepted and warning_window.user_choice == 0:
                self.on_edit()

        elif self.kwargs["last_sync_date"] is None:
            warning_window = DynamicButtonDialog(
                title="–ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
                message=f"""
                    <p>–ò–≥—Ä–∞ <b>{self.kwargs["game_name"]}</b> –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å 
                    —Å —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞ —ç—Ç–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ</p>

                    <p><b>–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å:</b></p>

                    <p><span style="color: #2196F3;">1. –°–∫–∞—á–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞</span></p>

                    <p style="border: 1px solid #f44336; border-radius: 5px; padding: 8px; background-color: #2d0000; margin-top: 0;">
                    <span style="color: #ff5252; font-weight: bold;">‚ö† –í–ù–ò–ú–ê–ù–ò–ï: –¢–ï–ö–£–©–ò–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –ë–£–î–£–¢ –ü–û–¢–ï–†–Ø–ù–´!</span><br/>
                    <span style="color: #ffffff;">–ü–∞–ø–∫–∞ "{self.kwargs["saves_path"]}" –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞</span>
                    </p>

                    <p><span style="color: #4CAF50;">2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä</span><br/>
                    <i>–°–æ–∑–¥–∞—Å—Ç –±—ç–∫–∞–ø –∏ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</i></p>
                """,
                buttons=[('–°–∫–∞—á–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞', 'primary'),
                         ('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä', 'success'),
                         ('–û—Ç–º–µ–Ω–∞', 'secondary')],
                default_button=2
            )
            warning_window.setFixedSize(400, 440)
            result = warning_window.exec()
            if result == QDialog.Accepted:
                if warning_window.user_choice == 0:
                    confirmation_dialog = DynamicButtonDialog(
                        title='–í–ù–ò–ú–ê–ù–ò–ï!',
                        message=f"""
                            <p><b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:</b></p>

                            <p style="color: #ff5252; font-weight: bold; text-align: center; margin: 15px 0;">
                            ‚ö† –í–°–ï –õ–û–ö–ê–õ–¨–ù–´–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –ë–£–î–£–¢ –ü–û–¢–ï–†–Ø–ù–´!
                            </p>

                            <p>–ü–∞–ø–∫–∞ <u>"{self.kwargs["saves_path"]}"</u> –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞ 
                            –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞.</p>

                            <p><b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b></p>
                        """,
                        buttons=[('–î–∞, —Å–∫–∞—á–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞', 'danger'),
                                 ('–û—Ç–º–µ–Ω–∞', 'secondary')],
                        default_button=1
                    )
                    confirmation_dialog.setFixedSize(400, 300)
                    confirm_result = confirmation_dialog.exec()
                    if confirm_result == QDialog.Accepted:
                        if confirmation_dialog.user_choice == 0:
                            self.sync_runner.run_async(download_saves_action,self.kwargs['game_name'],
                                                       self.kwargs['saves_path'], game_id, api_client=self.api_client)
                elif warning_window.user_choice == 1:
                    self.sync_runner.run_async(sync_saves_action, game_name=self.kwargs['game_name'],
                                               saves_path=self.kwargs['saves_path'], game_id=game_id, api_client=self.api_client)
        else:
            if game_id:
                logger.info(f"Synchronizing the game with id: {game_id}")

                self.sync_runner.run_async(sync_saves_action, game_name=self.kwargs['game_name'],
                                       saves_path=self.kwargs['saves_path'], game_id=game_id, api_client=self.api_client)

class FlowLayout(QLayout):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π layout, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –≤ —Å–µ—Ç–∫–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫.
    –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self._item_list = []

    def __del__(self):
        item = self.takeAt(0)
        while item:
            item = self.takeAt(0)

    def addItem(self, item):
        self._item_list.append(item)

    def count(self):
        return len(self._item_list)

    def itemAt(self, index):
        if 0 <= index < len(self._item_list):
            return self._item_list[index]
        return None

    def takeAt(self, index):
        if 0 <= index < len(self._item_list):
            return self._item_list.pop(index)
        return None

    def expandingDirections(self):
        return Qt.Orientation(0)

    def hasHeightForWidth(self):
        return True

    def heightForWidth(self, width):
        height = self._do_layout(QRect(0, 0, width, 0), True)
        return height

    def setGeometry(self, rect):
        super().setGeometry(rect)
        self._do_layout(rect, False)

    def sizeHint(self):
        return self.minimumSize()

    def minimumSize(self):
        size = QSize()
        for item in self._item_list:
            size = size.expandedTo(item.minimumSize())
        margin, _, _, _ = self.getContentsMargins()
        size += QSize(2 * margin, 2 * margin)
        return size

    def _do_layout(self, rect, test_only):
        x = rect.x()
        y = rect.y()
        line_height = 0
        spacing = self.spacing()

        for item in self._item_list:
            wid = item.widget()
            space_x = spacing
            space_y = spacing
            next_x = x + item.sizeHint().width() + space_x
            if next_x - space_x > rect.right() and line_height > 0:
                x = rect.x()
                y = y + line_height + space_y
                next_x = x + item.sizeHint().width() + space_x
                line_height = 0

            if not test_only:
                item.setGeometry(QRect(QPoint(x, y), item.sizeHint()))

            x = next_x
            line_height = max(line_height, item.sizeHint().height())

        return y + line_height - rect.y()

class AddNewGameWindow(QDialog):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.
    –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã, –ø—É—Ç–µ–π –∫ exe-—Ñ–∞–π–ª—É, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
    –í–º–µ—â–∞–µ—Ç –≤ —Å–µ–±—è –æ–±—ä–µ–∫—Ç—ã ClickableFrame."""

    game_update = Signal(str)

    def __init__(self, parent = None, edit=None, **kwargs):
        super().__init__(parent)
        self.kwargs = kwargs
        self.api_client = APIClient()
        self.edit = edit
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É" if self.edit is None else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã")
        self.setModal(True)
        self.setFixedSize(500, 300)
        self.setStyleSheet("""
            QDialog {
                background-color: #29292A;
                color: white;
            }
            QLabel {
                color: white;
                font-size: 14px;
            }
            QLineEdit {
                background-color: #3A3A3C;
                color: white;
                border: 1px solid #555557;
                border-radius: 5px;
                padding: 8px;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 1px solid #4CAF50;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px 20px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
            QPushButton#cancelButton {
                background-color: #666666;
            }
            QPushButton#cancelButton:hover {
                background-color: #777777;
            }
            QPushButton#cancelButton:pressed {
                background-color: #555555;
            }
        """)
        self.create_add_new_game_window()

    def create_add_new_game_window(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # –§–æ—Ä–º–∞
        form_layout = QFormLayout()
        form_layout.setSpacing(15)
        form_layout.setLabelAlignment(Qt.AlignLeft)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        if self.edit is not None:
            game_name_edit = QLineEdit(text=self.kwargs['game_name'])
            saves_path_edit = QLineEdit(text=self.kwargs['saves_path'])
            exe_path_edit = QLineEdit(text=self.kwargs['game_path'])
            image_path_edit = QLineEdit(text=self.kwargs['image_path'])
        else:
            game_name_edit = QLineEdit()
            saves_path_edit = QLineEdit()
            exe_path_edit = QLineEdit()
            image_path_edit = QLineEdit()

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–µ–π
        saves_browse_button = QPushButton("–û–±–∑–æ—Ä")
        exe_browse_button = QPushButton("–û–±–∑–æ—Ä")
        image_browse_button = QPushButton("–û–±–∑–æ—Ä")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±–∑–æ—Ä–∞
        def browse_saves():
            directory = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π")
            if directory:
                saves_path_edit.setText(directory)

        def browse_exe():
            file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ exe —Ñ–∞–π–ª", "", "Executable Files (*.exe)")
            if file_path:
                exe_path_edit.setText(file_path)

        def browse_image():
            file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "",
                                                       "Image Files (*.png *.jpg *.jpeg *.bmp *.gif)")
            if file_path:
                image_path_edit.setText(file_path)

        saves_browse_button.clicked.connect(browse_saves)
        exe_browse_button.clicked.connect(browse_exe)
        image_browse_button.clicked.connect(browse_image)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
        form_layout.addRow(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:"), game_name_edit)

        # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–∑–æ—Ä–∞
        saves_layout = QHBoxLayout()
        saves_layout.addWidget(saves_path_edit)
        saves_layout.addWidget(saves_browse_button)
        form_layout.addRow(QLabel("–ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º:"), saves_layout)

        # –ü—É—Ç—å –∫ exe —Ñ–∞–π–ª—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–∑–æ—Ä–∞
        exe_layout = QHBoxLayout()
        exe_layout.addWidget(exe_path_edit)
        exe_layout.addWidget(exe_browse_button)
        form_layout.addRow(QLabel("–ü—É—Ç—å –∫ exe —Ñ–∞–π–ª—É:"), exe_layout)

        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–∑–æ—Ä–∞

        image_layout = QHBoxLayout()
        image_layout.addWidget(image_path_edit)
        image_layout.addWidget(image_browse_button)
        form_layout.addRow(QLabel("–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:"), image_layout)

        main_layout.addLayout(form_layout)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(10)

        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å" if self.edit is None else "–ò–∑–º–µ–Ω–∏—Ç—å")
        add_button.setObjectName("addButton")
        cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_button.setObjectName("cancelButton")

        buttons_layout.addWidget(add_button)
        buttons_layout.addWidget(cancel_button)

        main_layout.addLayout(buttons_layout)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        def accept_dialog():
            game_name = game_name_edit.text().strip()
            saves_path = saves_path_edit.text().strip()
            exe_path = exe_path_edit.text().strip()
            image_path = image_path_edit.text().strip()

            if not game_name:
                no_name_message = DynamicButtonDialog(
                    title="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É!",
                    message="<b>–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∏–º—è –∏–≥—Ä—ã!</b>",
                    buttons=[('OK', 'secondary'), ]
                )
                no_name_message.setFixedSize(240, 110)
                no_name_message.show()
                return
            if not saves_path or not os.path.exists(saves_path):
                no_saves_path_message = DynamicButtonDialog(
                    title="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É!",
                    message="<b>–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º –∏–≥—Ä—ã!</b>",
                    buttons=[('OK', 'secondary'), ]
                )
                no_saves_path_message.setFixedSize(300, 110)
                no_saves_path_message.show()
                return
            if not exe_path or not os.path.exists(exe_path) or not exe_path.endswith(".exe"):
                no_saves_path_message = DynamicButtonDialog(
                    title="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É!",
                    message="<b>–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—É—Ç—å –∫ exe —Ñ–∞–π–ª—É –∏–≥—Ä—ã!</b>"
                            "<p>–ù—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º '.exe'!</p>",
                    buttons=[('OK', 'secondary'), ]
                )
                no_saves_path_message.setFixedSize(310, 110)
                no_saves_path_message.show()
                return

            if self.edit is None:
                add_status = add_new_game(game_name=game_name, saves_path=saves_path, game_path=exe_path, image_path=image_path)
                if not add_status:
                    add_error = DynamicButtonDialog(
                        title="–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã!",
                        message=f"–ò–≥—Ä–∞ —Å –∏–º–µ–Ω–µ–º '{game_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
                    )
                    add_error.setFixedSize(240, 110)
                    add_error.show()
            else:
                update_game(game_name=game_name, saves_path=saves_path, game_path=exe_path,
                            image_path=image_path, game_id=self.kwargs["game_id"])

                self.update_game_runner = AsyncRunner()
                self.update_game_runner.run_async(update_game_data_on_server_action,
                                                  self.kwargs["game_name"], game_name, self.api_client)

                self.game_update.emit(self.kwargs['game_id'])

            self.accept()

        def cancel_dialog():
            self.reject()

        add_button.clicked.connect(accept_dialog)
        cancel_button.clicked.connect(cancel_dialog)

        self.exec()

class GamesDashboard(QWidget):
    """–û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–≥—Ä –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ClickableFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã –∏ FlowLayout –¥–ª—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏."""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.api_client = APIClient()
        self.setStyleSheet("background-color: #29292A;")

        # === –°–ö–†–û–õ–õ–ò–†–£–ï–ú–ê–Ø –û–ë–õ–ê–°–¢–¨ ===
        self.scroll_area = QScrollArea()
        self.scroll_area.setStyleSheet("background-color: #29292A; border: none;")
        self.scroll_area.setWidgetResizable(True)

        # === –ö–û–ù–¢–ï–ô–ù–ï–† –î–õ–Ø –ö–ê–†–¢–û–ß–ï–ö ===
        self.container_widget = QWidget()
        self.container_widget.setStyleSheet("background-color: #29292A;")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FlowLayout –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        self.flow_layout = FlowLayout()
        self.flow_layout.setSpacing(15)
        self.flow_layout.setContentsMargins(20, 20, 20, 20)

        self.setup_widget()

    def setup_widget(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ dashboard'–∞"""
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä
        self.populate_game_cards()

        self.container_widget.setLayout(self.flow_layout)
        self.scroll_area.setWidget(self.container_widget)

        # === –ö–ù–û–ü–ö–ê "+" ===
        self.add_button = QPushButton("+")
        self.add_button.setFixedSize(60, 60)
        self.add_button.setStyleSheet("""
            QPushButton {
                background-color: rgba(36, 66, 189, 0.3);
                color: white;
                border-radius: 30px;
                font-size: 66px;
                font-weight: semi-bold;
            }
            QPushButton:hover {
                background-color: rgba(36, 66, 189, 0.7);
            }
            QPushButton:pressed {
                background-color: rgba(28, 51, 145, 0.9);
            }
        """)
        self.add_button.clicked.connect(self.add_new_game)

        # === –†–ê–ó–ú–ï–©–ï–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í ===
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        main_layout.addWidget(self.scroll_area)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä—Ö scroll_area
        self.add_button.setParent(self)
        self.add_button.raise_()

        self.update_button_position()

    def populate_game_cards(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç dashboard –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏–≥—Ä"""
        games_data = get_all_games()

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        while self.flow_layout.count():
            child = self.flow_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        for game_id, data in games_data.items():
            card_widget = self.create_game_card(
                game_id=game_id,
                game_name=data["game_name"],
                image_path=data["image_path"],
                game_path=data["game_path"],
                saves_path=data["saves_path"],
                last_sync_date=data["last_sync_date"]
            )
            self.flow_layout.addWidget(card_widget)

    def create_game_card(self, game_id, game_name, image_path, game_path, saves_path, last_sync_date):
        """–°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        card = ClickableFrame(game_id=game_id, game_name=game_name, game_path=game_path, saves_path=saves_path,
                              image_path=image_path, last_sync_date=last_sync_date)

        card.game_deleted_signal.connect(self.refresh_dashboard)
        card.game_update_signal.connect(self.refresh_dashboard)

        card_style = """
            QFrame {
                background-color: #333333;
                border: 2px solid #444444;
                border-radius: 10px;
            }
            QFrame:hover {
                border-color: #1B3CBF;
                background-color: #3a3a3a;
            }
        """

        card.setStyleSheet(card_style)
        card.setFixedSize(420, 220)

        image_label = QLabel()
        image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        image_label.setStyleSheet("""
            background-color: transparent;
            border: none;
        """)
        image_label.setFixedSize(390, 160)

        game_label = QLabel(game_name)
        game_label.setStyleSheet("""
            color: white;
            font-size: 16px;
            font-weight: bold;
            text-align: center;
            background-color: transparent;
            border: none;
        """)
        game_label.setWordWrap(True)
        game_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        game_label.setFixedHeight(25)

        card_layout = QVBoxLayout()
        card_layout.setContentsMargins(10, 10, 10, 10)
        card_layout.setSpacing(8)
        card_layout.addWidget(image_label)
        card_layout.addWidget(game_label)

        card.setLayout(card_layout)
        card.setCursor(Qt.PointingHandCursor)

        return card

    def setup_card_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        # –ù–∞–¥–ø–∏—Å—å –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        self.sync_label = QLabel("not sync")
        self.sync_label.setStyleSheet("""
            QLabel {
                color: #888888;
                font-size: 12px;
                background-color: transparent;
            }
        """)
        self.sync_label.setParent(self)
        self.sync_label.move(10, 10)  # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª

    def update_button_position(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏ '+'"""
        if hasattr(self, 'add_button'):
            button_size = self.add_button.size()
            parent_size = self.size()
            x = parent_size.width() - button_size.width() - 20
            y = parent_size.height() - button_size.height() - 20
            self.add_button.move(max(20, x), max(20, y))

    def refresh_dashboard(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç dashboard –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        async_runner = AsyncRunner()
        async_runner.finished.connect(self.populate_game_cards)
        async_runner.error.connect(self.populate_game_cards)
        async_runner.run_async(load_games_covers, self.api_client)
        self.populate_game_cards()
        logger.info(f"Dashboard was refreshed.")

    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞"""
        super().resizeEvent(event)
        self.update_button_position()

    def showEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤–∏–¥–∂–µ—Ç–∞"""
        super().showEvent(event)
        self.update_button_position()

    def add_new_game(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        AddNewGameWindow()
        self.refresh_dashboard()

